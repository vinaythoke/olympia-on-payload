/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    organizers: Organizer;
    volunteers: Volunteer;
    events: Event;
    'audit-logs': AuditLog;
    'form-builders': FormBuilder;
    submissions: Submission;
    tickets: Ticket;
    'ticket-purchases': TicketPurchase;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    organizers: OrganizersSelect<false> | OrganizersSelect<true>;
    volunteers: VolunteersSelect<false> | VolunteersSelect<true>;
    events: EventsSelect<false> | EventsSelect<true>;
    'audit-logs': AuditLogsSelect<false> | AuditLogsSelect<true>;
    'form-builders': FormBuildersSelect<false> | FormBuildersSelect<true>;
    submissions: SubmissionsSelect<false> | SubmissionsSelect<true>;
    tickets: TicketsSelect<false> | TicketsSelect<true>;
    'ticket-purchases': TicketPurchasesSelect<false> | TicketPurchasesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name: string;
  role?: ('superadmin' | 'organizer' | 'participant' | 'volunteer') | null;
  verification?: {
    status?: ('not_verified' | 'pending' | 'verified' | 'rejected') | null;
    aadhaar?: string | null;
    pan?: string | null;
    verifiedData?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
  };
  profileComplete?: boolean | null;
  contactDetails?: {
    /**
     * Format: +91XXXXXXXXXX
     */
    phone?: string | null;
    address?: string | null;
  };
  /**
   * Sensitive personal information (e.g., address, phone number). This field is encrypted in the database.
   */
  personalInfo?: string | null;
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  createdBy?: (number | null) | User;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    tablet?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "organizers".
 */
export interface Organizer {
  id: number;
  organizerName: string;
  user?: (number | null) | User;
  /**
   * Set the organizer account status
   */
  status: 'active' | 'inactive' | 'suspended';
  description?: string | null;
  logo?: (number | null) | Media;
  contactEmail?: string | null;
  contactPhone?: string | null;
  website?: string | null;
  address?: {
    line1?: string | null;
    line2?: string | null;
    city?: string | null;
    state?: string | null;
    postalCode?: string | null;
    country?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "volunteers".
 */
export interface Volunteer {
  id: number;
  displayName: string;
  /**
   * Profile picture for the volunteer (may be shown at events)
   */
  profilePicture?: (number | null) | Media;
  user: number | User;
  managedBy: number | Organizer;
  assignedEvents?: (number | Event)[] | null;
  notes?: string | null;
  status?: ('active' | 'inactive') | null;
  checkInStats?: {
    totalCheckins?: number | null;
    lastCheckIn?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: number;
  title: string;
  organizer: number | Organizer;
  eventBanner?: (number | null) | Media;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  category?: ('music' | 'sports' | 'arts' | 'conference' | 'workshop' | 'other') | null;
  eventDate: string;
  location?: {
    name?: string | null;
    address?: string | null;
    city?: string | null;
    state?: string | null;
    country?: string | null;
    postalCode?: string | null;
  };
  status: 'draft' | 'published' | 'cancelled';
  capacity?: number | null;
  /**
   * Select a form for event registration
   */
  registrationForm?: (number | null) | FormBuilder;
  /**
   * Ticketing settings for this event
   */
  ticketing?: {
    enabled?: boolean | null;
    requiresTicket?: boolean | null;
    /**
     * Maximum number of tickets a single person can purchase
     */
    maxTicketsPerPerson?: number | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-builders".
 */
export interface FormBuilder {
  id: number;
  /**
   * Name of the form for easy reference
   */
  name: string;
  /**
   * Event this form is associated with (optional)
   */
  event?: (number | null) | Event;
  /**
   * Brief description of the form purpose
   */
  description?: string | null;
  /**
   * Form fields configuration
   */
  fields?:
    | {
        /**
         * Unique identifier for the field
         */
        fieldId: string;
        fieldType:
          | 'text'
          | 'textarea'
          | 'number'
          | 'email'
          | 'phone'
          | 'date'
          | 'checkbox'
          | 'select'
          | 'multiselect'
          | 'radio'
          | 'file';
        /**
         * Label displayed to the user
         */
        fieldLabel: string;
        /**
         * Placeholder text (where applicable)
         */
        placeholder?: string | null;
        /**
         * Is this field required?
         */
        required?: boolean | null;
        /**
         * Options for select, multi-select, and radio fields
         */
        options?:
          | {
              label: string;
              value: string;
              id?: string | null;
            }[]
          | null;
        /**
         * Validation rules for this field
         */
        validations?: {
          /**
           * Minimum characters allowed
           */
          minLength?: number | null;
          /**
           * Maximum characters allowed
           */
          maxLength?: number | null;
          /**
           * Minimum value allowed
           */
          minValue?: number | null;
          /**
           * Maximum value allowed
           */
          maxValue?: number | null;
          /**
           * Regex pattern for validation
           */
          pattern?: string | null;
          /**
           * Custom error message when validation fails
           */
          customErrorMessage?: string | null;
        };
        /**
         * Additional help text for the field
         */
        helpText?: string | null;
        /**
         * Width of the field in the form layout
         */
        width?: ('full' | 'half') | null;
        id?: string | null;
      }[]
    | null;
  formSettings?: {
    submitButtonText?: string | null;
    successMessage?: string | null;
    /**
     * URL to redirect to after form submission (optional)
     */
    redirectAfterSubmit?: string | null;
  };
  layoutSettings?: {
    layout?: ('stacked' | 'grid') | null;
    showLabels?: boolean | null;
    showPlaceholders?: boolean | null;
    showHelpText?: boolean | null;
  };
  /**
   * Submissions for this form (managed automatically)
   */
  formResponses?: (number | Submission)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "submissions".
 */
export interface Submission {
  id: number;
  submissionID: string;
  form: number | FormBuilder;
  event?: (number | null) | Event;
  submittedBy: number | User;
  /**
   * JSON data containing all form field responses
   */
  formData:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  status: 'submitted' | 'under_review' | 'approved' | 'rejected';
  /**
   * Internal notes about this submission (not visible to participant)
   */
  adminNotes?: string | null;
  /**
   * Files uploaded as part of this form submission
   */
  files?:
    | {
        file: number | Media;
        /**
         * The field ID this file corresponds to
         */
        fieldId: string;
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  ipAddress?: string | null;
  userAgent?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "audit-logs".
 */
export interface AuditLog {
  id: number;
  action: 'create' | 'update' | 'delete' | 'status_change' | 'access_attempt';
  entityType: 'organizer' | 'user' | 'event' | 'ticket' | 'volunteer' | 'system';
  entityId: string;
  /**
   * Details of the changes made
   */
  details?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * IP address of the user who made the change
   */
  ipAddress?: string | null;
  /**
   * User agent of the browser/client used
   */
  userAgent?: string | null;
  /**
   * User who performed this action
   */
  createdBy?: (number | null) | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tickets".
 */
export interface Ticket {
  id: number;
  name: string;
  description?: string | null;
  event: number | Event;
  type: 'free' | 'paid' | 'rsvp' | 'protected';
  price?: number | null;
  currency?: ('USD' | 'EUR' | 'GBP') | null;
  quantity: number;
  remainingQuantity?: number | null;
  visibility: 'public' | 'private';
  protectionDetails?: {
    protectionType?: ('password' | 'pin' | 'code') | null;
    password?: string | null;
    pin?: string | null;
    accessCode?: string | null;
  };
  /**
   * Define who can see this ticket based on demographics
   */
  visibilityRules?: {
    enableRules?: boolean | null;
    ageRange?: {
      enabled?: boolean | null;
      minAge?: number | null;
      maxAge?: number | null;
    };
    gender?: {
      enabled?: boolean | null;
      allowedGenders?: ('male' | 'female' | 'nonbinary' | 'other')[] | null;
    };
    location?: {
      enabled?: boolean | null;
      countries?:
        | {
            country?: string | null;
            id?: string | null;
          }[]
        | null;
    };
  };
  /**
   * Additional form fields specific to this ticket
   */
  customFormFields?: (number | null) | FormBuilder;
  saleStartDate?: string | null;
  saleEndDate?: string | null;
  status: 'active' | 'inactive' | 'sold-out';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ticket-purchases".
 */
export interface TicketPurchase {
  id: number;
  purchaseId?: string | null;
  ticket: number | Ticket;
  event: number | Event;
  purchaser: number | User;
  quantity: number;
  unitPrice: number;
  totalAmount: number;
  currency: 'USD' | 'EUR' | 'GBP';
  purchaseDate: string;
  /**
   * Responses to custom form fields
   */
  formResponses?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  status: 'pending' | 'completed' | 'cancelled' | 'refunded';
  paymentMethod?: ('credit-card' | 'paypal' | 'bank-transfer' | 'free') | null;
  /**
   * Payment gateway response details
   */
  paymentDetails?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  ticketCode?: string | null;
  /**
   * Whether this ticket has been used for entry
   */
  isCheckedIn?: boolean | null;
  /**
   * When the ticket was checked in
   */
  checkInTime?: string | null;
  /**
   * Photo taken during check-in
   */
  checkInPhoto?: (number | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'organizers';
        value: number | Organizer;
      } | null)
    | ({
        relationTo: 'volunteers';
        value: number | Volunteer;
      } | null)
    | ({
        relationTo: 'events';
        value: number | Event;
      } | null)
    | ({
        relationTo: 'audit-logs';
        value: number | AuditLog;
      } | null)
    | ({
        relationTo: 'form-builders';
        value: number | FormBuilder;
      } | null)
    | ({
        relationTo: 'submissions';
        value: number | Submission;
      } | null)
    | ({
        relationTo: 'tickets';
        value: number | Ticket;
      } | null)
    | ({
        relationTo: 'ticket-purchases';
        value: number | TicketPurchase;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  verification?:
    | T
    | {
        status?: T;
        aadhaar?: T;
        pan?: T;
        verifiedData?: T;
      };
  profileComplete?: T;
  contactDetails?:
    | T
    | {
        phone?: T;
        address?: T;
      };
  personalInfo?: T;
  updatedAt?: T;
  createdAt?: T;
  enableAPIKey?: T;
  apiKey?: T;
  apiKeyIndex?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  createdBy?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        tablet?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "organizers_select".
 */
export interface OrganizersSelect<T extends boolean = true> {
  organizerName?: T;
  user?: T;
  status?: T;
  description?: T;
  logo?: T;
  contactEmail?: T;
  contactPhone?: T;
  website?: T;
  address?:
    | T
    | {
        line1?: T;
        line2?: T;
        city?: T;
        state?: T;
        postalCode?: T;
        country?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "volunteers_select".
 */
export interface VolunteersSelect<T extends boolean = true> {
  displayName?: T;
  profilePicture?: T;
  user?: T;
  managedBy?: T;
  assignedEvents?: T;
  notes?: T;
  status?: T;
  checkInStats?:
    | T
    | {
        totalCheckins?: T;
        lastCheckIn?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events_select".
 */
export interface EventsSelect<T extends boolean = true> {
  title?: T;
  organizer?: T;
  eventBanner?: T;
  description?: T;
  category?: T;
  eventDate?: T;
  location?:
    | T
    | {
        name?: T;
        address?: T;
        city?: T;
        state?: T;
        country?: T;
        postalCode?: T;
      };
  status?: T;
  capacity?: T;
  registrationForm?: T;
  ticketing?:
    | T
    | {
        enabled?: T;
        requiresTicket?: T;
        maxTicketsPerPerson?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "audit-logs_select".
 */
export interface AuditLogsSelect<T extends boolean = true> {
  action?: T;
  entityType?: T;
  entityId?: T;
  details?: T;
  ipAddress?: T;
  userAgent?: T;
  createdBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-builders_select".
 */
export interface FormBuildersSelect<T extends boolean = true> {
  name?: T;
  event?: T;
  description?: T;
  fields?:
    | T
    | {
        fieldId?: T;
        fieldType?: T;
        fieldLabel?: T;
        placeholder?: T;
        required?: T;
        options?:
          | T
          | {
              label?: T;
              value?: T;
              id?: T;
            };
        validations?:
          | T
          | {
              minLength?: T;
              maxLength?: T;
              minValue?: T;
              maxValue?: T;
              pattern?: T;
              customErrorMessage?: T;
            };
        helpText?: T;
        width?: T;
        id?: T;
      };
  formSettings?:
    | T
    | {
        submitButtonText?: T;
        successMessage?: T;
        redirectAfterSubmit?: T;
      };
  layoutSettings?:
    | T
    | {
        layout?: T;
        showLabels?: T;
        showPlaceholders?: T;
        showHelpText?: T;
      };
  formResponses?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "submissions_select".
 */
export interface SubmissionsSelect<T extends boolean = true> {
  submissionID?: T;
  form?: T;
  event?: T;
  submittedBy?: T;
  formData?: T;
  status?: T;
  adminNotes?: T;
  files?:
    | T
    | {
        file?: T;
        fieldId?: T;
        description?: T;
        id?: T;
      };
  ipAddress?: T;
  userAgent?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tickets_select".
 */
export interface TicketsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  event?: T;
  type?: T;
  price?: T;
  currency?: T;
  quantity?: T;
  remainingQuantity?: T;
  visibility?: T;
  protectionDetails?:
    | T
    | {
        protectionType?: T;
        password?: T;
        pin?: T;
        accessCode?: T;
      };
  visibilityRules?:
    | T
    | {
        enableRules?: T;
        ageRange?:
          | T
          | {
              enabled?: T;
              minAge?: T;
              maxAge?: T;
            };
        gender?:
          | T
          | {
              enabled?: T;
              allowedGenders?: T;
            };
        location?:
          | T
          | {
              enabled?: T;
              countries?:
                | T
                | {
                    country?: T;
                    id?: T;
                  };
            };
      };
  customFormFields?: T;
  saleStartDate?: T;
  saleEndDate?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ticket-purchases_select".
 */
export interface TicketPurchasesSelect<T extends boolean = true> {
  purchaseId?: T;
  ticket?: T;
  event?: T;
  purchaser?: T;
  quantity?: T;
  unitPrice?: T;
  totalAmount?: T;
  currency?: T;
  purchaseDate?: T;
  formResponses?: T;
  status?: T;
  paymentMethod?: T;
  paymentDetails?: T;
  ticketCode?: T;
  isCheckedIn?: T;
  checkInTime?: T;
  checkInPhoto?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}